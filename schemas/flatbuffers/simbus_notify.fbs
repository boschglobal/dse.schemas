/// Copyright 2024 Robert Bosch GmbH
///
/// SPDX-License-Identifier: Apache-2.0

/*
    IDL for Simulation Bus Notify
    =============================

    Representation of Notify Messages.

*/


namespace dse.schemas.fbs.notify;


/*
    Signal Vectors
    ==============

    Signal Vectors containing scalar/numbers should be represented in
    native FBS vectors. Binary Signals must be represented in MsgPack
    encoded Signal Data.


    MsgPack Notes
    -------------

    MsgPack encoded Signal Data:
        Data = [
            [0..N], // (uint) Signal UID (mandatory)
            [0..N], // (number/binary) Signal Value (optional)
        ]

    MsgPack encoded Signal Vectors can be encoded with any MsgPack numeric
    type (e.g. Integer or Float) or as a MsgPack binary type (e.g bin format).
*/

struct Signal {
    /// Signal UID.
    uid:uint32;

    /// Signal Value (scalar).
    value:double;
}

table SignalVector {
    /// The name of the Signal Vector / Channel.
    name:string;

    /// UID of the Model related to this Signal Vector (optional).
    model_uid:uint;

    /// MsgPack encoded Signal Data.
    data:[ubyte];

    /// Vector encoded Signals (scalar).
    signal:[Signal];
}


/*
    Notify Message
    ==============

    Notify Messages may be:

        * Sent TO a Model - indicating changed signals and/or simulation time.
        * Sent FROM a Model - indicating updated signals and/or model time.

    The SimBus algorithm operates based on the directionality of the Notify
    Messages, as well as available time fields. Each path/direction/time
    combination has different semantic reasoning applied.

*/

/// Notify Message.
/// (SimBus -> Model) Analog to ModelStart message.
/// (Model -> SimBus) Analog to ModelReady message.
table NotifyMessage {
    /// Signal Vectors.
    signals:[SignalVector];

    /// Model Time.
    /// (SimBus -> Model) From where the Model should start its execution step.
    /// (Model -> SimBus) Indicates the reached and committed Model Time.
    model_time:double;

    /// Notify Time.
    /// (SimBus -> Model) Indicates the "event" time for the contained signals.
    /// (Model -> SimBus) Indicates the "event" time for the contained signals.
    notify_time:double;

    /// Schedule Time.
    /// (SimBus -> Model) The expected (or anticipated) Stop Time for the execution step.
    schedule_time:double;

    /// UID.
    /// (Model -> SimBus) Indicate which Models are represented by this Notify Message.
    model_uid:[uint];

    /// Benchmarking.
    /// (notify) Amount of time processing the Notify Message.
    bench_notify_time_ns:ulong;
    /// (model) Amount of time executing the Model (i.e. calling do_step()).
    bench_model_time_ns:ulong;
}


/// Metadata for this schema endpoint.
root_type NotifyMessage;
file_identifier "SBNO";  // SBNO => Simulation Bus NOtify
